buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/snapshot' }

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    
}
apply plugin: 'maven'
apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'



dependencies {

    compile project(':resources')
    compile project(':operations')

    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.springframework.boot:spring-boot-starter-security')

    compile('com.h2database:h2')

    compile("io.jsonwebtoken:jjwt:0.7.0")

    compile 'javax.servlet:javax.servlet-api:3.1.0'

    compile 'commons-beanutils:commons-beanutils:1.9.3'

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile "com.github.tomakehurst:wiremock-standalone:2.18.0"
    testCompile('org.springframework.boot:spring-boot-starter-test')


    //cql stuff
//    compile('info.cqframework:cql:1.2.20')
//    compile('info.cqframework:model:1.2.20')
//    compile('info.cqframework:cql-to-elm:1.2.20')
//    compile('info.cqframework:quick:1.2.20')
    compile('org.opencds.cqf:cql-engine:1.2.20')
    compile('org.opencds.cqf:cql-engine-fhir:1.2.20')
    //Use locally compiled cql libs (engine and fhir)
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile group: 'info.cqframework', name: 'cql-to-elm', version: '1.3.10'
}


task integrationTest(type: Test) {

    doFirst{
        project(':ehr-server').tasks.appBeforeIntegrationTest.execute()
        filter{
            includeTestsMatching "*PrefetchIntegrationTest*"
        }
    }
    doLast{
        project(':ehr-server').tasks.appAfterIntegrationTest.execute()

    }


}

task buildReact(type:Exec) {
    workingDir 'src/main/resources/node_interfaces'
    commandLine './buildout.sh'
}

