buildscript {
    ext {
        springBootVersion = '2.4.1'
    }
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/snapshot' }

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'maven-publish'
//apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

processResources {
    from ('CDS-Library') {
        into 'CDS-Library'
    }
}   

bootRun {  
    if (project.hasProperty('debug')) { 
        jvmArgs=["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:8091"]
    }
} 

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")

    implementation project(':resources')
    implementation project(':operations')
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'com.google.code.gson:gson:2.8.8'

    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-data-rest')
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-validation')

    implementation('com.h2database:h2')

    implementation("io.jsonwebtoken:jjwt:0.7.0")


    implementation 'commons-beanutils:commons-beanutils:1.9.3'

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation "com.github.tomakehurst:wiremock-standalone:2.18.0"
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    implementation 'ca.uhn.hapi.fhir:hapi-fhir-base:5.3.0'
    implementation 'ca.uhn.hapi.fhir:hapi-fhir-structures-r4:5.3.0'

    implementation 'com.jayway.jsonpath:json-path:2.4.0'
    implementation 'joda-time:joda-time:2.10.5'

    //cql stuff
    implementation (group: 'org.opencds.cqf.cql', name: 'engine', version: '1.5.1') {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
    implementation (group: 'org.opencds.cqf.cql', name: 'engine.fhir', version: '1.5.1') {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }

    //Use locally compiled cql libs (engine and fhir)
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation group: 'info.cqframework', name: 'cql-to-elm', version: '1.5.1'

    implementation 'org.zeroturnaround:zt-zip:1.13'

    implementation group: 'org.kohsuke', name:'github-api', version:'1.77'
}

task buildReact(type:Exec) {
    workingDir 'src/main/resources/node_interfaces'
    commandLine './buildout.sh'
}

task embedDtr() {
    doLast {
        embedDtrScript()
    }
}

void embedDtrScript() {
    exec {
        workingDir './'
        commandLine 'git','clone','https://github.com/HL7-DaVinci/dtr.git','tempFolder'
    }
    exec {
        workingDir 'tempFolder'
        commandLine 'yarn', 'install'
    }
    exec {
        workingDir 'tempFolder'
        commandLine 'yarn', 'build'
    }
    exec {
        workingDir './'
        commandLine 'rm', '-rf', 'src/main/resources/static/smart'
    }
    exec {
        workingDir './'
        commandLine 'cp', '-a', 'tempFolder/public', 'src/main/resources/static/smart'
    }
    exec {
        workingDir './'
        commandLine 'rm', '-rf', 'tempFolder'
    }
}

task embedCdsLibrary() {
    doFirst {
        exec {
            workingDir './'
            commandLine 'rm', '-rf', 'CDS-Library'
        }
    }

    doLast {
        if (project.hasProperty('branch')) {
            cloneCdsLibraryScript(branch)
        } else {
            cloneCdsLibraryScript('master')
        }
    }
}

task updateCdsLibrary() {
    doLast {
        if (project.hasProperty('branch')) {
            checkoutCdsLibraryScript(branch)
            pullCdsLibraryScript()
        } else {
            pullCdsLibraryScript()
        }
    }
}

void cloneCdsLibraryScript(branch) {
    println "GIT: clone CDS-Library branch " + branch
    exec {
        workingDir './'
        commandLine 'git', 'clone', 'https://github.com/HL7-DaVinci/CDS-Library.git', 'CDS-Library'
    }
    checkoutCdsLibraryScript(branch)
}

void pullCdsLibraryScript() {
    println "GIT: pull latest CDS-Library"
    exec {
        workingDir './CDS-Library'
        commandLine 'git', 'pull'
    }
}

void checkoutCdsLibraryScript(branch) {
    println "GIT: checkout CDS-Library branch " + branch
    exec {
        workingDir './CDS-Library'
        commandLine 'git', 'checkout', branch
    }
}

