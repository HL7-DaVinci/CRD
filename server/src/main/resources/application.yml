# avoid a hibernate error message, fix from https://github.com/pgjdbc/pgjdbc/issues/1102
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation: true

spring:
  thymeleaf:
    cache: false
  datasource:
    url: jdbc:h2:mem:myDb;DB_CLOSE_DELAY=-1
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate.dialect: org.hibernate.dialect.H2Dialect
      hibernate.hbm2ddl.auto: create-drop
  profiles:
    active: localDb
#    active: gitHub
#    active: cdsConnect

server:
  port: 8090
  servlet:
    # contextPath should start with "/" but not end with one. This is good: "/cds-hooks"
    contextPath: /

checkJwt: false

# CORS Allowed Origins
corsOrigins:
  - "http://localhost:8080"
  - "http://localhost:3000"
  - "http://localhost:3002"
  - "http://localhost:3005"

checkPractitionerLocation: false

# The smart app launchUrl. It can be relative, which will be turned into an absolute link against the url the server is running at.
# If you want it to be absolute, it MUST start with "http://" or "https://"
# To use the embedded DTR smart app, use "/smart/launch.html"
#launchUrl: /smart/launch.html
launchUrl: http://localhost:3005/launch

appendParamsToSmartLaunchUrl: false

# The appconext may need to be encoded depending on which EHR the server is running with
urlEncodeAppContext: true

# When this flag is true, the server will modify a FHIR Library when retrieved.
# It will automatically retrieve, base64 encode, and embed the referenced (from url)
# CQL into the data field of the content.
embedCqlInLibrary: true

cdsConnect:
  url: https://cdsconnect.ahrqstg.org
  username: admin
  password: admin
  #basic-auth: user:pass
  #proxy-host: proxy.com
  #proxy-port: 80

gitHubConfig:
  username: user
  token: token
  repository: HL7-DaVinci/CDS-Library
  branch: master
  rule-path: CRD-DTR/
  examplesPath: Examples/
  useZipForReload: true

localDb:
  path: CDS-Library/CRD-DTR/
  examplesPath: CDS-Library/Examples/

valueSetCachePath: ValueSetCache/

hostOrg: default

# Configure whether Query Batch Requests will be used to backfill potentially missing prefetch resources.
queryBatchRequest: true
